/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
SequencerAudioProcessorEditor::SequencerAudioProcessorEditor (SequencerAudioProcessor* ownerFilter)
    : AudioProcessorEditor (ownerFilter)
{
	for(int i=0;i<NUM_CHANNELS_MAX;i++)
	{
		addAndMakeVisible(theStepSliders.add(new Slider("Pitch" + String(i))));
		theStepSliders[i]->setSliderStyle (Slider::LinearBarVertical);
		theStepSliders[i]->addListener (this);
		theStepSliders[i]->setRange (-12, 12, 1);
	}
    setSize (600, 300);
}

SequencerAudioProcessorEditor::~SequencerAudioProcessorEditor()
{
}

void SequencerAudioProcessorEditor::paint (Graphics& g)
{
    g.fillAll (Colours::white);
}

void SequencerAudioProcessorEditor::sliderValueChanged(Slider* slider)
{
	if(slider->getName().contains("Pitch"))
	{
		int index = slider->getName().getTrailingIntValue();
		getProcessor()->setParameterNotifyingHost(index, slider->getValue());
	}
	else if(slider->getName().contains("Velocity"))
	{
		int index = slider->getName().getTrailingIntValue();
		getProcessor()->setParameterNotifyingHost(index + 16, slider->getValue());
	}
	else if(slider->getName().contains("State"))
	{
		int index = slider->getName().getTrailingIntValue();
		getProcessor()->setParameterNotifyingHost(index + 32, slider->getValue());
	}
}

void SequencerAudioProcessorEditor::timerCallback()
{
    SequencerAudioProcessor* ourProcessor = getProcessor();
}

void SequencerAudioProcessorEditor::resized()
{
	for(int i=0;i<NUM_CHANNELS_MAX;i++)
	{
		theStepSliders[i]->setBounds((getWidth()/16)*i, getHeight()/3, 20, 100);
	}
}






